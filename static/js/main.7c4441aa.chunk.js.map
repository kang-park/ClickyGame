{"version":3,"sources":["logo.svg","components/Header/Header.js","components/ImageCard/ImageCard.js","components/ScoreBar/ScoreBar.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","title","desc","rules","ImageCard","onClick","imageClick","src","image","alt","id","width","ScoreBar","score","Wrapper","children","App","state","images","clickedImages","shuffleCards","array","sort","b","Math","random","event","console","log","target","currentImage","_this","indexOf","alert","setState","concat","_this2","this","components_Header_Header","components_ScoreBar_ScoreBar","components_Wrapper_Wrapper","map","components_ImageCard_ImageCard","key","imageURL","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0kCAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wKCUzBC,SAPF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,yBAAyBJ,EAAMK,OAC/CJ,EAAAC,EAAAC,cAAA,KAAGC,UAAY,oBAAoBJ,EAAMM,KAAKL,EAAAC,EAAAC,cAAA,WAAMH,EAAMO,UCKnDC,SARC,SAAAR,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOK,QAAST,EAAMU,YACjCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,MAAOC,IAAKb,EAAMc,GAAIV,UAAU,iBAAiBW,MAAM,aCGpEC,SANA,SAAAhB,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMiB,UCMXC,SARD,SAAAlB,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVJ,EAAMmB,oBCwEJC,0NApEbC,MAAQ,CACNC,SACAC,cAAe,GACfN,MAAO,KAGTO,aAAe,SAAAC,GAEb,OADAA,EAAMC,KAAK,SAACxB,EAAEyB,GAAH,MAAS,GAAMC,KAAKC,WACxBJ,KAGTf,WAAa,SAAAoB,GACXC,QAAQC,IAAIF,EAAMG,QAClB,IAAIC,EAAeJ,EAAMG,OAAOpB,IACXsB,EAAKd,MAAME,cAAca,QAAQF,IAAiB,GAGrEG,MAAM,aACNF,EAAKG,SAAS,CACZhB,OAAQa,EAAKX,aAAaF,GACxBC,cAAc,GACdN,MAAO,KAGXkB,EAAKG,SACH,CACEhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAeY,EAAKd,MAAME,cAAcgB,OAAOL,GAC/CjB,MAAOkB,EAAKd,MAAMJ,MAAO,GAE3B,WAC2B,KAArBkB,EAAKd,MAAMJ,QACboB,MAAM,YACNF,EAAKG,SAAS,CACZhB,OAAQa,EAAKX,aAAaF,GAC1BC,cAAe,GACfN,MAAO,gFAQX,IAAAuB,EAAAC,KACN,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuC,EAAD,CACErC,MAAM,+BACNC,KAAK,sBACLC,MAAM,8IAERN,EAAAC,EAAAC,cAACwC,EAAD,CAAU1B,MAASwB,KAAKpB,MAAMJ,QAC9BhB,EAAAC,EAAAC,cAACyC,EAAD,KACGH,KAAKpB,MAAMC,OAAOuB,IAAI,SAAAjC,GAAK,OAC1BX,EAAAC,EAAAC,cAAC2C,EAAD,CACEpC,WAAY8B,EAAK9B,WACjBI,GAAIF,EAAME,GACViC,IAAKnC,EAAME,GACXF,MAAOA,EAAMoC,sBA5DTC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7c4441aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Header.css\";\n\nlet Header = props => (\n    <header className=\"jumbotron jumbotron-fluid\">\n        <h1 className = \"display-3 text-center\">{props.title}</h1>\n        <p className = \"lead text-center\">{props.desc}<br/>{props.rules}</p>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./ImageCard.css\";\n\nlet ImageCard = props =>(\n    <div className=\"card\" onClick={props.imageClick}>\n        <div className=\"img-container\">\n            <img src={props.image} alt={props.id} className=\"img-responsive\" width=\"100%\"/>\n        </div>\n    </div>\n);\n\nexport default ImageCard;","import React from \"react\";\nimport \"./ScoreBar.css\";\n\nlet ScoreBar = props =>(\n    <div className=\"score-bar text-center\">\n        <h3>Score: {props.score}</h3>\n    </div>\n);\n\nexport default ScoreBar;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nlet Wrapper = props => (\n    <div className=\"container\">\n        <div className=\"wrapper\">\n            {props.children}\n        </div>\n    </div>\n);\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport ImageCard from \"./components/ImageCard\";\nimport ScoreBar from \"./components/ScoreBar\";\nimport Wrapper from \"./components/Wrapper\";\nimport images from \"./images.json\";\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    images,\n    clickedImages: [],\n    score: 0\n  };\n\n  shuffleCards = array =>{\n    array.sort((a,b) => 0.5 - Math.random());\n    return array;\n  };\n\n  imageClick = event =>{\n    console.log(event.target);\n    let currentImage = event.target.alt;\n    let alreadyClicked = this.state.clickedImages.indexOf(currentImage) > -1;\n\n    if (alreadyClicked){\n      alert(\"You lost!\");\n      this.setState({\n        images: this.shuffleCards(images),\n          clickedImages:[],\n          score: 0\n      });\n    } else {\n      this.setState(\n        {\n          images: this.shuffleCards(images),\n          clickedImages: this.state.clickedImages.concat(currentImage),\n          score: this.state.score +1\n        },\n        () => {\n          if (this.state.score === 12){\n            alert(\"You win!\");\n            this.setState({\n              images: this.shuffleCards(images),\n              clickedImages: [],\n              score: 0\n            });\n          }\n        }\n      );\n    }\n  };\n\n  render(){\n    return(\n      <div>\n        <Header\n          title=\"Super Smash Bros Memory Game\"\n          desc=\"A React Memory Game\"\n          rules=\"Click on a different Super Smash character every time to earn a point. If you click on the same character twice, the game will start over\"\n        />\n        <ScoreBar score = {this.state.score} />\n        <Wrapper>\n          {this.state.images.map(image => (\n            <ImageCard\n              imageClick={this.imageClick}\n              id={image.id}\n              key={image.id}\n              image={image.imageURL}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}